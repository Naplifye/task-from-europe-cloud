services:
  mongodb-master:
      build:
        context: .
        dockerfile: mongodb.Dockerfile
      container_name: mongodb-master
      hostname: mongodb-master
      command: ["--replSet", "rs0", "--bind_ip", "10.10.0.2", "--port", "27017", "--keyFile", "/etc/mongodb/pki/keyfile"]
      volumes:
        - mongodb-master-data:/var/lib/mongodb
        - $PWD/init-user.js:/docker-entrypoint-initdb.d/init-user.js
      healthcheck:
        test: echo "try {rs.status()} catch(err) {rs.initiate({_id:'rs0',members:[{_id:0,host:'10.10.0.2:27017'},{_id:1,host:'10.10.0.2:27018'},{_id:2,host:'10.10.0.2:27019',arbiterOnly:true}]})}" | mongosh --host 10.10.0.2:27017 -u root -p root --authenticationDatabase admin --quiet
        interval: 5m
        timeout: 10s
        retries: 3
        start_period: 10s
      network_mode: host      
      environment:
        MONGO_INITDB_ROOT_USERNAME: root
        MONGO_INITDB_ROOT_PASSWORD: root
  mongodb-slave:
      build:
        context: .
        dockerfile: mongodb.Dockerfile
      container_name: mongodb-slave
      hostname: mongodb-slave
      command: ["--replSet", "rs0", "--bind_ip", "10.10.0.2", "--port", "27018", "--keyFile", "/etc/mongodb/pki/keyfile"] 
      volumes: 
        - mongodb-slave-data:/var/lib/mongodb  
      network_mode: host
      environment:
        MONGO_INITDB_ROOT_USERNAME: root
        MONGO_INITDB_ROOT_PASSWORD: root
  mongodb-arbiter:
      build:
        context: .
        dockerfile: mongodb.Dockerfile
      container_name: mongodb-arbiter
      hostname: mongodb-arbiter
      command: ["--replSet", "rs0", "--bind_ip", "10.10.0.2", "--port", "27019", "--keyFile", "/etc/mongodb/pki/keyfile"]  
      volumes:
        - mongodb-arbiter-data:/var/lib/mongodb
      network_mode: host
      environment:
        MONGO_INITDB_ROOT_USERNAME: root
        MONGO_INITDB_ROOT_PASSWORD: root

volumes:
  mongodb-master-data:
  mongodb-slave-data:
  mongodb-arbiter-data: